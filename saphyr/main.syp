import std.cstring;
import std.List;
import std.Queue;
import std.cstdio;

class Lambda
{
	struct this
	{
		@void func;
		@void inst;
	}

	void call()
	{
		auto ptr = func->as(@(@void)void);
		ptr(inst);
	}
}

class FunctionItem
{
	struct this
	{
		cstring name;
		List<byte> code;
		Lambda callback;
		bool immediate;
	}

	this()
	name{null->as(StrPtr)}, callback{}, immediate{false}
	{
	}

	#[mangle("this2")]
	this(cstring n)
	name{n}, callback{}, immediate{false}
	{
	}

	#[mangle("this3")]
	this(FunctionItem n)
	name{n.name}, callback{n.callback}, immediate{n.immediate}
	{
		for (int i = 0; i < n.code.size(); i++)
			code.add(n.code.at(i));
	}

	#[oper("=")]
	void asgn(FunctionItem item)
	{
		name = item.name;
		code.clear();
		for (int i = 0; i < item.code.size(); i++)
			code.add(item.code.at(i));
		callback = item.callback;
		immediate = item.immediate;
	}

	void pushInt(int val)
	{
		code.add(val);
	}

	void run()
	{
		callback.call();
	}
}

class FunctionTable
{
	struct this {
		List<FunctionItem> items;
	}

	@FunctionItem ref(int id)
	{
		return items.ref(id);
	}

	@FunctionItem find(cstring name, @int id)
	{
		for (int i = items.size() - 1; i >= 0; i--) {
			auto func = items.ref(i);
			if (func.name.eq(name.get())) {
				id @= i;
				return func;
			}
		}
		return null;
	}

	#[mangle("find2")]
	@FunctionItem find(cstring name)
	{
		int id;
		return find(name, id$);
	}

	int add(cstring name)
	{
		FunctionItem func{name};
		items.add(func);

		return items.size() - 1;
	}
}

enum OpCode
{
	Call, Jump, Prompt, PushNum, Read, Return
}

enum Mode
{
	Execute, Compile
}

struct ReturnData
{
	int id, pc;
}

class VM
{
	struct this
	{
		FunctionTable ftable;
		List<int> dstack;
		List<ReturnData> rstack;
		int fc;
		int pc;
		Mode mode;
		bool runVM;
	}

	byte getOpCode(int idx)
	{
		return ftable.ref(fc).code.at(idx);
	}

	byte currOpCode()
	{
		return getOpCode(pc);
	}

	byte nextOpCode()
	{
		return getOpCode(++pc);
	}

	int nextInt()
	{
		return nextOpCode();
	}

	@FunctionItem findFunc(cstring name, @int id)
	{
		return ftable.find(name, id);
	}

	#[mangle("findFunc2")]
	@FunctionItem findFunc(cstring name)
	{
		int id;
		return findFunc(name, id$);
	}

	int addFunc(cstring name)
	{
		return ftable.add(name);
	}

	void callFunc(int func)
	{
		auto ptr = ftable.ref(func);
		if (ptr.code.size()) {
			ReturnData rd;
			rd.id = fc;
			rd.pc = pc;
			rstack.add(rd);
			fc = func;
			pc = -1;
		} else {
			ptr.run();
		}
	}

	void call()
	{
		callFunc(nextInt());
	}

	void jump()
	{
		pc += nextInt() - 1;
	}

	void pushNum()
	{
		dstack.add(nextInt());
	}

	void returnFunc()
	{
		auto data = rstack.pop();
		pc = data.pc;
		fc = data.id;
	}

	void exit()
	{
		runVM = false;
	}

	void stackAdd()
	{
		auto a = dstack.pop();
		auto b = dstack.pop();
		dstack.add(b + a);
	}

	void stackSub()
	{
		auto a = dstack.pop();
		auto b = dstack.pop();
		dstack.add(b - a);
	}

	void stackMul()
	{
		auto a = dstack.pop();
		auto b = dstack.pop();
		dstack.add(b * a);
	}

	void stackDiv()
	{
		auto a = dstack.pop();
		auto b = dstack.pop();
		dstack.add(b / a);
	}

	void stackDup()
	{
		dstack.add(dstack.top());
	}

	void stackPop()
	{
		dstack.pop();
	}

	void stackClr()
	{
		dstack.clear();
	}

	void stackSwp()
	{
		auto a = dstack.pop();
		auto b = dstack.pop();
		dstack.add(a);
		dstack.add(b);
	}

	void printTopStack()
	{
		if (dstack.size()) {
			auto str = toString(dstack.top());
			puts(str);
			delete str;
		} else {
			puts("<empty>");
		}
	}

	void printStack()
	{
		fputs("[ ", stdout);
		for (int i = 0; i < dstack.size(); i++) {
			auto str = toString(dstack.at(i));
			fputs(str, stdout);
			fputs(" ", stdout);
			delete str;
		}
		puts("]");
	}

	void addCallbackFunc(StrPtr name, @void funcPtr)
	{
		cstring n{name};
		auto ptr = ftable.ref(addFunc(n));
		ptr.callback.func = funcPtr;
		ptr.callback.inst = this;
	}

	void setupFunctions()
	{
		addCallbackFunc(".", printTopStack);
		addCallbackFunc("..", printStack);

		addCallbackFunc("+", stackAdd);
		addCallbackFunc("-", stackSub);
		addCallbackFunc("*", stackMul);
		addCallbackFunc("/", stackDiv);

		addCallbackFunc("dup", stackDup);
		addCallbackFunc("pop", stackPop);
		addCallbackFunc("clr", stackClr);
		addCallbackFunc("swp", stackSwp);
		addCallbackFunc("exit", exit);
	}

	this()
	runVM{true}, mode{Mode.Execute}, pc{-1}
	{
		setupFunctions();
	}

}

class TxtInput
{
	struct this
	{
		Queue<cstring> buff;
	}

	bool empty()
	{
		return buff.empty();
	}

	void printError(StrPtr str)
	{
		puts(str);
		buff.clear();
		cstring empty;
		buff.push(empty);
	}

	void prependEmpty()
	{
		cstring empty;
		buff.pushFront(empty);
	}

	void readLine()
	{
		[256]byte line;

		fgets(line$, 256, stdin);

		auto ptr = strtok(line$, " \t\n");
		while (ptr) {
			cstring word{ptr};
			buff.push(word);
			ptr = strtok(null, " \t\n");
		}
	}

	cstring nextWord()
	{
		if (buff.empty()) {
			readLine();
			cstring empty;
			buff.push(empty);
		}
		return buff.pop();
	}
}

class Interpreter
{
	struct this
	{
		@VM vm;
		@FunctionItem defFunc;
		@TxtInput input;
	}

	bool execWord(cstring word)
	{
		int id;
		auto ptr = vm.findFunc(word, id$);
		if (!ptr) {
			bool error = false;
			auto num = toNumber(word.get(), error$);
			if (error) {
				cstring msg;
				msg.add("Error: `").add(word.get()).add("` not a function or a number");
				input.printError(msg.get());
			} else if (vm.mode == Mode.Execute) {
				vm.dstack.add(num);
			} else {
				defFunc.code.add(OpCode.PushNum);
				defFunc.pushInt(num);
			}
		} else if (ptr.immediate) {
			ptr.run();
		} else if (vm.mode == Mode.Execute) {
			vm.callFunc(id);
			return !ptr.code.size();
		} else {
			defFunc.code.add(OpCode.Call);
			defFunc.pushInt(id);
		}
		return true;
	}

	bool read()
	{
		cstring word = input.nextWord();
		if (!word.size())
			return false;
		return execWord(word);
	}

	void prompt()
	{
		if (input.empty())
			fputs(vm.mode == Mode.Execute ? "\n> " : "...> ", stdout);

		while (read())
			;
	}

	void endDefineFunc()
	{
		vm.mode = Mode.Execute;
		if (defFunc) {
			defFunc.code.add(OpCode.Return);
			defFunc = null;
		}
	}

	void defineFunc()
	{
		vm.mode = Mode.Compile;
		auto name = input.nextWord();
		while (!name.size()) {
			prompt();
			name = input.nextWord();
		}

		auto ptr = vm.findFunc(name);
		if (ptr) {
			endDefineFunc();

			cstring msg{"Function already defined: "};
			msg.add(name.get());

			input.printError(msg.get());
			return;
		}

		defFunc = vm.ftable.ref(vm.addFunc(name));
	}

	void run()
	{
		while (vm.runVM) {
			switch (vm.nextOpCode()) {
			case OpCode.Call:
				vm.call();
				break;
			case OpCode.Jump:
				vm.jump();
				break;
			case OpCode.Prompt:
				prompt();
				break;
			case OpCode.PushNum:
				vm.pushNum();
				break;
			case OpCode.Read:
				read();
				break;
			case OpCode.Return:
				vm.returnFunc();
				break;
			default:
				fputs("Invalid Opcode: ", stdout);
				fputs(toString(vm.currOpCode()), stdout);
				fputs(" ; At Instruction: ", stdout);
				puts(toString(vm.pc));
			}
		}
	}

	this(@VM vm, @TxtInput input)
	vm{vm}, input{input}, defFunc{}
	{
		cstring name{" "};
		auto id = vm.addFunc(name);
		auto ptr = vm.ftable.ref(id);
		ptr.code.add(OpCode.Prompt);
		ptr.code.add(OpCode.Jump);
		ptr.pushInt(-2);

		vm.fc = id;
		defFunc = null;

		name = ":";
		ptr = vm.ftable.ref(vm.addFunc(name));
		ptr.callback.func = defineFunc;
		ptr.callback.inst = this;

		name = ";";
		ptr = vm.ftable.ref(vm.addFunc(name));
		ptr.callback.func = endDefineFunc;
		ptr.callback.inst = this;
		ptr.immediate = true;
	}
}

int main()
{
	VM vm;
	TxtInput input;
	Interpreter runner{vm$, input$};

	runner.run();

	return 0;
}
