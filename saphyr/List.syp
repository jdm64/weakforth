
import "Base.syp";

class List<T>
{
	struct this
	{
		@[]T arr;
		int sz, cap;
	}

	this()
	arr{}, sz{}, cap{}
	{
	}

	~this()
	{
		delete arr;
		arr = null;
		cap = sz = 0;
	}

	void shuffle()
	{
		for (int i = sz, k = i - 1; i > 1; i--, k--) {
			auto x = rand() % i;
			auto t = arr[x];
			arr[x] = arr[k];
			arr[k] = t;
		}
	}

	void add(T item)
	{
		if (!arr) {
			arr = new [cap = 8]T;
		} else if (sz == cap) {
			auto ptr = new [cap += cap >> 1]T;
			for (auto i = 0; i < sz; i++)
				ptr[i] = arr[i];
			// delete arr; // TODO call copy constructor on previous line
			arr = ptr;
		}
		arr[sz++] = item;
	}

	T pop()
	{
		return arr[--sz];
	}

	T top()
	{
		return arr[sz - 1];
	}

	T at(int idx)
	{
		return arr[idx];
	}

	@T ref(int idx)
	{
		return arr[idx]$;
	}

	int size()
	{
		return sz;
	}

	void clear()
	{
		sz = 0;
	}
}
